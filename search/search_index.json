{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"openai summarize diff action \u2042 smart ai summaries for your code changes - get concise, automated explanations of your git diffs using openai. this github action receives the last git diff and uses openai to generate a human-readable summary that explains the changes in clear, concise language. perfect for pr descriptions, release notes, or commit messages. documentation \u2042 getting started \u2042 \u26a1 getting started - quick setup guide \ud83d\udcd8 usage examples - common usage patterns \ud83d\udee0\ufe0f configuration options - all available settings developer resources \u2042 \ud83d\udc69\u200d\ud83d\udcbb development guide - contribute to this project \ud83c\udfd7\ufe0f architecture - understand how it works \ud83d\udd0d troubleshooting - solve common issues \ud83e\udd1d contributing - how to contribute key features \u2042 concise explanations - generates clear, readable summaries of code changes customizable output - control summary length, style, and formatting ci/cd integration - easy to incorporate into your existing github workflows robust error handling - comprehensive testing and graceful failure modes dev-friendly - well-documented api and simple integration options example output \u2042 for a diff that adds error handling to a function: error handling implementation: - added detailed logging for runtime exceptions - implemented fallback mechanism for failed operations - integrated with existing monitoring system for a diff that updates dependencies: dependency updates: - bumped react from v17.0 to v18.2 - fixed security vulnerabilities in lodash - removed deprecated packages star this repo! \u2b50 \u2042 if you find this action useful, please star the repository to help others discover it!","title":"home"},{"location":"#openai-summarize-diff-action","text":"smart ai summaries for your code changes - get concise, automated explanations of your git diffs using openai. this github action receives the last git diff and uses openai to generate a human-readable summary that explains the changes in clear, concise language. perfect for pr descriptions, release notes, or commit messages.","title":"openai summarize diff action"},{"location":"#documentation","text":"","title":"documentation"},{"location":"#getting-started","text":"\u26a1 getting started - quick setup guide \ud83d\udcd8 usage examples - common usage patterns \ud83d\udee0\ufe0f configuration options - all available settings","title":"getting started"},{"location":"#developer-resources","text":"\ud83d\udc69\u200d\ud83d\udcbb development guide - contribute to this project \ud83c\udfd7\ufe0f architecture - understand how it works \ud83d\udd0d troubleshooting - solve common issues \ud83e\udd1d contributing - how to contribute","title":"developer resources"},{"location":"#key-features","text":"concise explanations - generates clear, readable summaries of code changes customizable output - control summary length, style, and formatting ci/cd integration - easy to incorporate into your existing github workflows robust error handling - comprehensive testing and graceful failure modes dev-friendly - well-documented api and simple integration options","title":"key features"},{"location":"#example-output","text":"for a diff that adds error handling to a function: error handling implementation: - added detailed logging for runtime exceptions - implemented fallback mechanism for failed operations - integrated with existing monitoring system for a diff that updates dependencies: dependency updates: - bumped react from v17.0 to v18.2 - fixed security vulnerabilities in lodash - removed deprecated packages","title":"example output"},{"location":"#star-this-repo","text":"if you find this action useful, please star the repository to help others discover it!","title":"star this repo! \u2b50"},{"location":"configuration/","text":"configuration options \u2042 this page documents all the configuration options available for the openai summarize diff action. input parameters \u2042 the action accepts the following inputs, which can be specified in your workflow file: parameter required default description diff yes - the git diff to be explained. typically generated via git diff command. apikey yes - your openai api key. should be stored as a secret. examplePostSummary no \"update the code with new features: parallelisation, caching, and better error handling\" an example summary to guide the model's output style. maxTokens no 30 maximum number of tokens to generate. this affects the length of the generated explanation. maxCharacters no 140 maximum characters in the generated explanation. useful for ensuring the explanation fits in limited spaces. detailed parameter information \u2042 diff \u2042 the git diff to be explained. this should be the output from a git diff command. you'll typically generate this in your workflow using a command like: git diff origin/${{ github.event.pull_request.base.ref }}..HEAD the diff should be provided in the standard git diff format: diff --git a/file.js b/file.js index 123..456 789 --- a/file.js +++ b/file.js @@ -1,3 +1,4 @@ const a = 1; +const b = 2; const c = 3; apikey \u2042 your openai api key. this should be stored as a github repository secret and referenced in your workflow like this: apikey: ${{ secrets.OPENAI_API_KEY }} never hardcode your api key directly in the workflow file. examplePostSummary \u2042 an example summary to guide the model's output style. this helps the openai model understand the tone, format, and style you want for the generated explanation. examples: \"feat: added user authentication and improved error handling\" \"fix: resolved memory leak in data processing pipeline\" \"refactor: simplified API response handling for better maintainability\" maxTokens \u2042 maximum number of tokens to generate. openai models use tokens, which are chunks of text (roughly 4 characters per token in english). this parameter limits the length of the generated explanation. recommended values: - short summaries: 20-30 - medium explanations: 50-100 - detailed explanations: 100-200 note that higher values may result in higher api costs. maxCharacters \u2042 maximum characters in the generated explanation. this parameter ensures the explanation fits within specific character limits (like tweet length, commit message limits, etc.) recommended values: - tweet-like: 140-280 - commit message: ~50-72 - pr comment: 500-1000 output parameters \u2042 parameter description explanation the generated explanation of the diff. usage examples \u2042 basic usage \u2042 - name: Explain Diff id: explain uses: captradeoff/openai-summarize-diff-action@main with: diff: ${{ env.DIFF }} apikey: ${{ secrets.OPENAI_API_KEY }} custom summary style \u2042 - name: Explain Diff id: explain uses: captradeoff/openai-summarize-diff-action@main with: diff: ${{ env.DIFF }} apikey: ${{ secrets.OPENAI_API_KEY }} examplePostSummary: \"feat: updated api with improved performance and better error messages\" longer output \u2042 - name: Explain Diff id: explain uses: captradeoff/openai-summarize-diff-action@main with: diff: ${{ env.DIFF }} apikey: ${{ secrets.OPENAI_API_KEY }} maxTokens: 100 maxCharacters: 500 using the output \u2042 you can use the explanation output in subsequent steps: - name: Output explanation run: echo \"${{ steps.explain.outputs.explanation }}\" or add it as a pr comment: - name: Post comment uses: actions/github-script@v7 with: github-token: ${{ secrets.GITHUB_TOKEN }} script: | github.rest.issues.createComment({ issue_number: context.issue.number, owner: context.repo.owner, repo: context.repo.repo, body: `## \ud83e\udd16 AI Summary of Changes\\n\\n${{ steps.explain.outputs.explanation }}` }); best practices \u2042 store api keys securely : always use github secrets for your openai api key. optimize token usage : use the minimum number of tokens needed to get a good summary to minimize costs. provide example summaries : for more consistent results, provide example summaries that match your desired style. filter large diffs : consider filtering out large auto-generated files from diffs for better results. handle error cases : add error handling in your workflow for cases where the openai api might fail.","title":"configuration"},{"location":"configuration/#configuration-options","text":"this page documents all the configuration options available for the openai summarize diff action.","title":"configuration options"},{"location":"configuration/#input-parameters","text":"the action accepts the following inputs, which can be specified in your workflow file: parameter required default description diff yes - the git diff to be explained. typically generated via git diff command. apikey yes - your openai api key. should be stored as a secret. examplePostSummary no \"update the code with new features: parallelisation, caching, and better error handling\" an example summary to guide the model's output style. maxTokens no 30 maximum number of tokens to generate. this affects the length of the generated explanation. maxCharacters no 140 maximum characters in the generated explanation. useful for ensuring the explanation fits in limited spaces.","title":"input parameters"},{"location":"configuration/#detailed-parameter-information","text":"","title":"detailed parameter information"},{"location":"configuration/#diff","text":"the git diff to be explained. this should be the output from a git diff command. you'll typically generate this in your workflow using a command like: git diff origin/${{ github.event.pull_request.base.ref }}..HEAD the diff should be provided in the standard git diff format: diff --git a/file.js b/file.js index 123..456 789 --- a/file.js +++ b/file.js @@ -1,3 +1,4 @@ const a = 1; +const b = 2; const c = 3;","title":"diff"},{"location":"configuration/#apikey","text":"your openai api key. this should be stored as a github repository secret and referenced in your workflow like this: apikey: ${{ secrets.OPENAI_API_KEY }} never hardcode your api key directly in the workflow file.","title":"apikey"},{"location":"configuration/#examplepostsummary","text":"an example summary to guide the model's output style. this helps the openai model understand the tone, format, and style you want for the generated explanation. examples: \"feat: added user authentication and improved error handling\" \"fix: resolved memory leak in data processing pipeline\" \"refactor: simplified API response handling for better maintainability\"","title":"examplePostSummary"},{"location":"configuration/#maxtokens","text":"maximum number of tokens to generate. openai models use tokens, which are chunks of text (roughly 4 characters per token in english). this parameter limits the length of the generated explanation. recommended values: - short summaries: 20-30 - medium explanations: 50-100 - detailed explanations: 100-200 note that higher values may result in higher api costs.","title":"maxTokens"},{"location":"configuration/#maxcharacters","text":"maximum characters in the generated explanation. this parameter ensures the explanation fits within specific character limits (like tweet length, commit message limits, etc.) recommended values: - tweet-like: 140-280 - commit message: ~50-72 - pr comment: 500-1000","title":"maxCharacters"},{"location":"configuration/#output-parameters","text":"parameter description explanation the generated explanation of the diff.","title":"output parameters"},{"location":"configuration/#usage-examples","text":"","title":"usage examples"},{"location":"configuration/#basic-usage","text":"- name: Explain Diff id: explain uses: captradeoff/openai-summarize-diff-action@main with: diff: ${{ env.DIFF }} apikey: ${{ secrets.OPENAI_API_KEY }}","title":"basic usage"},{"location":"configuration/#custom-summary-style","text":"- name: Explain Diff id: explain uses: captradeoff/openai-summarize-diff-action@main with: diff: ${{ env.DIFF }} apikey: ${{ secrets.OPENAI_API_KEY }} examplePostSummary: \"feat: updated api with improved performance and better error messages\"","title":"custom summary style"},{"location":"configuration/#longer-output","text":"- name: Explain Diff id: explain uses: captradeoff/openai-summarize-diff-action@main with: diff: ${{ env.DIFF }} apikey: ${{ secrets.OPENAI_API_KEY }} maxTokens: 100 maxCharacters: 500","title":"longer output"},{"location":"configuration/#using-the-output","text":"you can use the explanation output in subsequent steps: - name: Output explanation run: echo \"${{ steps.explain.outputs.explanation }}\" or add it as a pr comment: - name: Post comment uses: actions/github-script@v7 with: github-token: ${{ secrets.GITHUB_TOKEN }} script: | github.rest.issues.createComment({ issue_number: context.issue.number, owner: context.repo.owner, repo: context.repo.repo, body: `## \ud83e\udd16 AI Summary of Changes\\n\\n${{ steps.explain.outputs.explanation }}` });","title":"using the output"},{"location":"configuration/#best-practices","text":"store api keys securely : always use github secrets for your openai api key. optimize token usage : use the minimum number of tokens needed to get a good summary to minimize costs. provide example summaries : for more consistent results, provide example summaries that match your desired style. filter large diffs : consider filtering out large auto-generated files from diffs for better results. handle error cases : add error handling in your workflow for cases where the openai api might fail.","title":"best practices"},{"location":"contributing/","text":"contributing guide \u2042 thank you for your interest in contributing to the openai summarize diff action! this document provides guidelines and instructions for contributing to this project. code of conduct \u2042 we expect all contributors to follow our code of conduct. please be respectful and considerate of others when contributing to this project. how to contribute \u2042 there are many ways to contribute to this project: report bugs : if you find a bug, please create an issue with details on how to reproduce it. suggest features : if you have an idea for a new feature, create an issue with your suggestion. submit pull requests : if you'd like to fix a bug or implement a feature, submit a pull request with your changes. development setup \u2042 to set up your development environment: fork the repository on github. clone your fork locally: bash git clone https://github.com/yourusername/openai-summarize-diff-action.git cd openai-summarize-diff-action install dependencies: bash npm install create a branch for your changes: bash git checkout -b my-feature-branch make your changes and commit them with a clear commit message. push your branch to your fork: bash git push origin my-feature-branch create a pull request from your fork to the main repository. coding standards \u2042 follow the existing code style and formatting conventions. write clear, concise comments and commit messages. add tests for new features or bug fixes. ensure all tests pass before submitting a pull request. update documentation as needed. release process \u2042 the release process is managed by the project maintainers. the general workflow is: changes are merged into the main branch. maintainers decide when to create a new release based on the changes. a new version is tagged according to semantic versioning . a github release is created with release notes. license \u2042 by contributing to this project, you agree that your contributions will be licensed under the project's license. questions and acknowledgements \u2042 if you have any questions about contributing, please open an issue or contact the project maintainers. thank you for contributing to the openai summarize diff action!","title":"contributing"},{"location":"contributing/#contributing-guide","text":"thank you for your interest in contributing to the openai summarize diff action! this document provides guidelines and instructions for contributing to this project.","title":"contributing guide"},{"location":"contributing/#code-of-conduct","text":"we expect all contributors to follow our code of conduct. please be respectful and considerate of others when contributing to this project.","title":"code of conduct"},{"location":"contributing/#how-to-contribute","text":"there are many ways to contribute to this project: report bugs : if you find a bug, please create an issue with details on how to reproduce it. suggest features : if you have an idea for a new feature, create an issue with your suggestion. submit pull requests : if you'd like to fix a bug or implement a feature, submit a pull request with your changes.","title":"how to contribute"},{"location":"contributing/#development-setup","text":"to set up your development environment: fork the repository on github. clone your fork locally: bash git clone https://github.com/yourusername/openai-summarize-diff-action.git cd openai-summarize-diff-action install dependencies: bash npm install create a branch for your changes: bash git checkout -b my-feature-branch make your changes and commit them with a clear commit message. push your branch to your fork: bash git push origin my-feature-branch create a pull request from your fork to the main repository.","title":"development setup"},{"location":"contributing/#coding-standards","text":"follow the existing code style and formatting conventions. write clear, concise comments and commit messages. add tests for new features or bug fixes. ensure all tests pass before submitting a pull request. update documentation as needed.","title":"coding standards"},{"location":"contributing/#release-process","text":"the release process is managed by the project maintainers. the general workflow is: changes are merged into the main branch. maintainers decide when to create a new release based on the changes. a new version is tagged according to semantic versioning . a github release is created with release notes.","title":"release process"},{"location":"contributing/#license","text":"by contributing to this project, you agree that your contributions will be licensed under the project's license.","title":"license"},{"location":"contributing/#questions-and-acknowledgements","text":"if you have any questions about contributing, please open an issue or contact the project maintainers. thank you for contributing to the openai summarize diff action!","title":"questions and acknowledgements"},{"location":"examples/","text":"usage examples \u2042 this page provides a variety of examples for using the openai summarize diff action in different scenarios. basic examples \u2042 summarize pr changes \u2042 the most basic usage is to summarize changes in a pull request and display the result in the workflow logs: name: Summarize PR Changes on: pull_request: types: [opened, synchronize] jobs: explain-diff: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v4 with: fetch-depth: 0 - name: Get PR diff id: diff run: | git fetch origin ${{ github.event.pull_request.base.ref }} DIFF=$(git diff origin/${{ github.event.pull_request.base.ref }}..HEAD) echo \"DIFF<<EOF\" >> $GITHUB_ENV echo \"$DIFF\" >> $GITHUB_ENV echo \"EOF\" >> $GITHUB_ENV - name: Explain Diff id: explain uses: captradeoff/openai-summarize-diff-action@main with: diff: ${{ env.DIFF }} apikey: ${{ secrets.OPENAI_API_KEY }} - name: Output explanation run: echo \"${{ steps.explain.outputs.explanation }}\" github integration examples \u2042 add summary as pr comment \u2042 automatically add the generated summary as a comment on the pr: name: Summarize PR Changes and Comment on: pull_request: types: [opened, synchronize] jobs: explain-diff: runs-on: ubuntu-latest permissions: pull-requests: write steps: - name: Checkout code uses: actions/checkout@v4 with: fetch-depth: 0 - name: Get PR diff id: diff run: | git fetch origin ${{ github.event.pull_request.base.ref }} DIFF=$(git diff origin/${{ github.event.pull_request.base.ref }}..HEAD) echo \"DIFF<<EOF\" >> $GITHUB_ENV echo \"$DIFF\" >> $GITHUB_ENV echo \"EOF\" >> $GITHUB_ENV - name: Explain Diff id: explain uses: captradeoff/openai-summarize-diff-action@main with: diff: ${{ env.DIFF }} apikey: ${{ secrets.OPENAI_API_KEY }} - name: Post comment uses: actions/github-script@v7 with: github-token: ${{ secrets.GITHUB_TOKEN }} script: | const explanation = process.env.EXPLANATION; github.rest.issues.createComment({ issue_number: context.issue.number, owner: context.repo.owner, repo: context.repo.repo, body: `## \ud83e\udd16 AI Summary of Changes\\n\\n${explanation}` }); env: EXPLANATION: ${{ steps.explain.outputs.explanation }} update pr description \u2042 add the summary to the pr description instead of as a comment: name: Update PR Description with Summary on: pull_request: types: [opened, synchronize] jobs: update-pr: runs-on: ubuntu-latest permissions: pull-requests: write steps: - name: Checkout code uses: actions/checkout@v4 with: fetch-depth: 0 - name: Get PR diff id: diff run: | git fetch origin ${{ github.event.pull_request.base.ref }} DIFF=$(git diff origin/${{ github.event.pull_request.base.ref }}..HEAD) echo \"DIFF<<EOF\" >> $GITHUB_ENV echo \"$DIFF\" >> $GITHUB_ENV echo \"EOF\" >> $GITHUB_ENV - name: Explain Diff id: explain uses: captradeoff/openai-summarize-diff-action@main with: diff: ${{ env.DIFF }} apikey: ${{ secrets.OPENAI_API_KEY }} - name: Get PR Description id: pr uses: actions/github-script@v7 with: github-token: ${{ secrets.GITHUB_TOKEN }} script: | const pr = await github.rest.pulls.get({ owner: context.repo.owner, repo: context.repo.repo, pull_number: context.issue.number }); return pr.data.body || ''; result-encoding: string - name: Update PR Description uses: actions/github-script@v7 with: github-token: ${{ secrets.GITHUB_TOKEN }} script: | const explanation = process.env.EXPLANATION; const currentBody = process.env.CURRENT_BODY; // Remove old summary if it exists let newBody = currentBody.replace(/## \ud83e\udd16 AI Summary of Changes[\\s\\S]*?(?=##|$)/, ''); // Add new summary newBody = `${newBody}\\n\\n## \ud83e\udd16 AI Summary of Changes\\n\\n${explanation}\\n\\n`; await github.rest.pulls.update({ owner: context.repo.owner, repo: context.repo.repo, pull_number: context.issue.number, body: newBody }); env: EXPLANATION: ${{ steps.explain.outputs.explanation }} CURRENT_BODY: ${{ steps.pr.outputs.result }} advanced examples \u2042 generate release notes \u2042 automatically create release notes when a tag is pushed: name: Generate Release Notes on: push: tags: - 'v*' jobs: release-notes: runs-on: ubuntu-latest permissions: contents: write steps: - name: Checkout code uses: actions/checkout@v4 with: fetch-depth: 0 - name: Get previous tag id: previoustag run: | PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo \"\") if [ -z \"$PREV_TAG\" ]; then PREV_TAG=$(git rev-list --max-parents=0 HEAD) fi echo \"PREV_TAG=$PREV_TAG\" >> $GITHUB_ENV - name: Get diff id: diff run: | DIFF=$(git diff $PREV_TAG..HEAD) echo \"DIFF<<EOF\" >> $GITHUB_ENV echo \"$DIFF\" >> $GITHUB_ENV echo \"EOF\" >> $GITHUB_ENV - name: Generate release notes id: notes uses: captradeoff/openai-summarize-diff-action@main with: diff: ${{ env.DIFF }} apikey: ${{ secrets.OPENAI_API_KEY }} examplePostSummary: \"Release includes: improved performance, new UI components, and better error handling\" maxTokens: 100 maxCharacters: 500 - name: Create Release uses: actions/create-release@v1 env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} with: tag_name: ${{ github.ref }} release_name: Release ${{ github.ref_name }} body: | # AI-Generated Release Notes ${{ steps.notes.outputs.explanation }} --- *Generated automatically by OpenAI Summarize Diff Action* draft: false prerelease: false custom diff format and filtering \u2042 filter the diff to exclude certain files before summarizing: name: Summarize PR with Filtering on: pull_request: types: [opened, synchronize] jobs: explain-filtered-diff: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v4 with: fetch-depth: 0 - name: Get filtered diff id: diff run: | git fetch origin ${{ github.event.pull_request.base.ref }} # Exclude package-lock.json, node_modules, and build outputs DIFF=$(git diff origin/${{ github.event.pull_request.base.ref }}..HEAD -- . ':(exclude)package-lock.json' ':(exclude)node_modules/**' ':(exclude)dist/**') echo \"DIFF<<EOF\" >> $GITHUB_ENV echo \"$DIFF\" >> $GITHUB_ENV echo \"EOF\" >> $GITHUB_ENV - name: Explain Diff id: explain uses: captradeoff/openai-summarize-diff-action@main with: diff: ${{ env.DIFF }} apikey: ${{ secrets.OPENAI_API_KEY }} - name: Output explanation run: echo \"${{ steps.explain.outputs.explanation }}\" additional resources \u2042 configuration options - learn about all available configuration options api reference - detailed information about inputs and outputs development guide - contribute to this project","title":"examples"},{"location":"examples/#usage-examples","text":"this page provides a variety of examples for using the openai summarize diff action in different scenarios.","title":"usage examples"},{"location":"examples/#basic-examples","text":"","title":"basic examples"},{"location":"examples/#summarize-pr-changes","text":"the most basic usage is to summarize changes in a pull request and display the result in the workflow logs: name: Summarize PR Changes on: pull_request: types: [opened, synchronize] jobs: explain-diff: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v4 with: fetch-depth: 0 - name: Get PR diff id: diff run: | git fetch origin ${{ github.event.pull_request.base.ref }} DIFF=$(git diff origin/${{ github.event.pull_request.base.ref }}..HEAD) echo \"DIFF<<EOF\" >> $GITHUB_ENV echo \"$DIFF\" >> $GITHUB_ENV echo \"EOF\" >> $GITHUB_ENV - name: Explain Diff id: explain uses: captradeoff/openai-summarize-diff-action@main with: diff: ${{ env.DIFF }} apikey: ${{ secrets.OPENAI_API_KEY }} - name: Output explanation run: echo \"${{ steps.explain.outputs.explanation }}\"","title":"summarize pr changes"},{"location":"examples/#github-integration-examples","text":"","title":"github integration examples"},{"location":"examples/#add-summary-as-pr-comment","text":"automatically add the generated summary as a comment on the pr: name: Summarize PR Changes and Comment on: pull_request: types: [opened, synchronize] jobs: explain-diff: runs-on: ubuntu-latest permissions: pull-requests: write steps: - name: Checkout code uses: actions/checkout@v4 with: fetch-depth: 0 - name: Get PR diff id: diff run: | git fetch origin ${{ github.event.pull_request.base.ref }} DIFF=$(git diff origin/${{ github.event.pull_request.base.ref }}..HEAD) echo \"DIFF<<EOF\" >> $GITHUB_ENV echo \"$DIFF\" >> $GITHUB_ENV echo \"EOF\" >> $GITHUB_ENV - name: Explain Diff id: explain uses: captradeoff/openai-summarize-diff-action@main with: diff: ${{ env.DIFF }} apikey: ${{ secrets.OPENAI_API_KEY }} - name: Post comment uses: actions/github-script@v7 with: github-token: ${{ secrets.GITHUB_TOKEN }} script: | const explanation = process.env.EXPLANATION; github.rest.issues.createComment({ issue_number: context.issue.number, owner: context.repo.owner, repo: context.repo.repo, body: `## \ud83e\udd16 AI Summary of Changes\\n\\n${explanation}` }); env: EXPLANATION: ${{ steps.explain.outputs.explanation }}","title":"add summary as pr comment"},{"location":"examples/#update-pr-description","text":"add the summary to the pr description instead of as a comment: name: Update PR Description with Summary on: pull_request: types: [opened, synchronize] jobs: update-pr: runs-on: ubuntu-latest permissions: pull-requests: write steps: - name: Checkout code uses: actions/checkout@v4 with: fetch-depth: 0 - name: Get PR diff id: diff run: | git fetch origin ${{ github.event.pull_request.base.ref }} DIFF=$(git diff origin/${{ github.event.pull_request.base.ref }}..HEAD) echo \"DIFF<<EOF\" >> $GITHUB_ENV echo \"$DIFF\" >> $GITHUB_ENV echo \"EOF\" >> $GITHUB_ENV - name: Explain Diff id: explain uses: captradeoff/openai-summarize-diff-action@main with: diff: ${{ env.DIFF }} apikey: ${{ secrets.OPENAI_API_KEY }} - name: Get PR Description id: pr uses: actions/github-script@v7 with: github-token: ${{ secrets.GITHUB_TOKEN }} script: | const pr = await github.rest.pulls.get({ owner: context.repo.owner, repo: context.repo.repo, pull_number: context.issue.number }); return pr.data.body || ''; result-encoding: string - name: Update PR Description uses: actions/github-script@v7 with: github-token: ${{ secrets.GITHUB_TOKEN }} script: | const explanation = process.env.EXPLANATION; const currentBody = process.env.CURRENT_BODY; // Remove old summary if it exists let newBody = currentBody.replace(/## \ud83e\udd16 AI Summary of Changes[\\s\\S]*?(?=##|$)/, ''); // Add new summary newBody = `${newBody}\\n\\n## \ud83e\udd16 AI Summary of Changes\\n\\n${explanation}\\n\\n`; await github.rest.pulls.update({ owner: context.repo.owner, repo: context.repo.repo, pull_number: context.issue.number, body: newBody }); env: EXPLANATION: ${{ steps.explain.outputs.explanation }} CURRENT_BODY: ${{ steps.pr.outputs.result }}","title":"update pr description"},{"location":"examples/#advanced-examples","text":"","title":"advanced examples"},{"location":"examples/#generate-release-notes","text":"automatically create release notes when a tag is pushed: name: Generate Release Notes on: push: tags: - 'v*' jobs: release-notes: runs-on: ubuntu-latest permissions: contents: write steps: - name: Checkout code uses: actions/checkout@v4 with: fetch-depth: 0 - name: Get previous tag id: previoustag run: | PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo \"\") if [ -z \"$PREV_TAG\" ]; then PREV_TAG=$(git rev-list --max-parents=0 HEAD) fi echo \"PREV_TAG=$PREV_TAG\" >> $GITHUB_ENV - name: Get diff id: diff run: | DIFF=$(git diff $PREV_TAG..HEAD) echo \"DIFF<<EOF\" >> $GITHUB_ENV echo \"$DIFF\" >> $GITHUB_ENV echo \"EOF\" >> $GITHUB_ENV - name: Generate release notes id: notes uses: captradeoff/openai-summarize-diff-action@main with: diff: ${{ env.DIFF }} apikey: ${{ secrets.OPENAI_API_KEY }} examplePostSummary: \"Release includes: improved performance, new UI components, and better error handling\" maxTokens: 100 maxCharacters: 500 - name: Create Release uses: actions/create-release@v1 env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} with: tag_name: ${{ github.ref }} release_name: Release ${{ github.ref_name }} body: | # AI-Generated Release Notes ${{ steps.notes.outputs.explanation }} --- *Generated automatically by OpenAI Summarize Diff Action* draft: false prerelease: false","title":"generate release notes"},{"location":"examples/#custom-diff-format-and-filtering","text":"filter the diff to exclude certain files before summarizing: name: Summarize PR with Filtering on: pull_request: types: [opened, synchronize] jobs: explain-filtered-diff: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v4 with: fetch-depth: 0 - name: Get filtered diff id: diff run: | git fetch origin ${{ github.event.pull_request.base.ref }} # Exclude package-lock.json, node_modules, and build outputs DIFF=$(git diff origin/${{ github.event.pull_request.base.ref }}..HEAD -- . ':(exclude)package-lock.json' ':(exclude)node_modules/**' ':(exclude)dist/**') echo \"DIFF<<EOF\" >> $GITHUB_ENV echo \"$DIFF\" >> $GITHUB_ENV echo \"EOF\" >> $GITHUB_ENV - name: Explain Diff id: explain uses: captradeoff/openai-summarize-diff-action@main with: diff: ${{ env.DIFF }} apikey: ${{ secrets.OPENAI_API_KEY }} - name: Output explanation run: echo \"${{ steps.explain.outputs.explanation }}\"","title":"custom diff format and filtering"},{"location":"examples/#additional-resources","text":"configuration options - learn about all available configuration options api reference - detailed information about inputs and outputs development guide - contribute to this project","title":"additional resources"},{"location":"getting-started/","text":"getting started \u2042 this guide will help you quickly set up and configure the openai summarize diff action in your github workflow. prerequisites \u2042 a github repository where you want to implement this action an openai api key (get one at openai platform ) basic setup \u2042 step 1: add your openai api key as a secret \u2042 navigate to your github repository go to settings > secrets and variables > actions click new repository secret name: OPENAI_API_KEY value: your openai api key click add secret step 2: create a workflow file \u2042 create a new file in .github/workflows/summarize-diff.yml with the following content: name: Summarize PR Changes on: pull_request: types: [opened, synchronize] jobs: explain-diff: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v4 with: fetch-depth: 0 - name: Get PR diff id: diff run: | git fetch origin ${{ github.event.pull_request.base.ref }} DIFF=$(git diff origin/${{ github.event.pull_request.base.ref }}..HEAD) echo \"DIFF<<EOF\" >> $GITHUB_ENV echo \"$DIFF\" >> $GITHUB_ENV echo \"EOF\" >> $GITHUB_ENV - name: Explain Diff id: explain uses: captradeoff/openai-summarize-diff-action@main with: diff: ${{ env.DIFF }} apikey: ${{ secrets.OPENAI_API_KEY }} - name: Output explanation run: echo \"${{ steps.explain.outputs.explanation }}\" that's it! now when a pull request is opened or updated, this action will generate a summary of the changes. common customizations \u2042 adding comment to pr \u2042 to automatically add the summary as a comment on your pr: - name: Post comment uses: actions/github-script@v7 with: github-token: ${{ secrets.GITHUB_TOKEN }} script: | const explanation = process.env.EXPLANATION; github.rest.issues.createComment({ issue_number: context.issue.number, owner: context.repo.owner, repo: context.repo.repo, body: `## \ud83e\udd16 AI Summary of Changes\\n\\n${explanation}` }); env: EXPLANATION: ${{ steps.explain.outputs.explanation }} custom output formatting \u2042 you can customize how the explanation is generated: - name: Explain Diff id: explain uses: captradeoff/openai-summarize-diff-action@main with: diff: ${{ env.DIFF }} apikey: ${{ secrets.OPENAI_API_KEY }} examplePostSummary: \"feat: added new login system with improved security\" maxTokens: 50 maxCharacters: 200 tips for best results \u2042 keep diffs focused : the action works best with focused changes rather than massive refactorings use concise example summaries : the examplePostSummary parameter helps guide the style of output handle large repositories : for very large repositories, consider using shallow clones to speed up the action next steps \u2042 \ud83d\udcd8 usage examples - see more examples of the action in use \ud83d\udee0\ufe0f configuration options - learn all the configuration options \ud83e\udde9 api reference - detailed information about inputs and outputs \ud83d\udd0d troubleshooting - solutions for common issues","title":"getting started"},{"location":"getting-started/#getting-started","text":"this guide will help you quickly set up and configure the openai summarize diff action in your github workflow.","title":"getting started"},{"location":"getting-started/#prerequisites","text":"a github repository where you want to implement this action an openai api key (get one at openai platform )","title":"prerequisites"},{"location":"getting-started/#basic-setup","text":"","title":"basic setup"},{"location":"getting-started/#step-1-add-your-openai-api-key-as-a-secret","text":"navigate to your github repository go to settings > secrets and variables > actions click new repository secret name: OPENAI_API_KEY value: your openai api key click add secret","title":"step 1: add your openai api key as a secret"},{"location":"getting-started/#step-2-create-a-workflow-file","text":"create a new file in .github/workflows/summarize-diff.yml with the following content: name: Summarize PR Changes on: pull_request: types: [opened, synchronize] jobs: explain-diff: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v4 with: fetch-depth: 0 - name: Get PR diff id: diff run: | git fetch origin ${{ github.event.pull_request.base.ref }} DIFF=$(git diff origin/${{ github.event.pull_request.base.ref }}..HEAD) echo \"DIFF<<EOF\" >> $GITHUB_ENV echo \"$DIFF\" >> $GITHUB_ENV echo \"EOF\" >> $GITHUB_ENV - name: Explain Diff id: explain uses: captradeoff/openai-summarize-diff-action@main with: diff: ${{ env.DIFF }} apikey: ${{ secrets.OPENAI_API_KEY }} - name: Output explanation run: echo \"${{ steps.explain.outputs.explanation }}\" that's it! now when a pull request is opened or updated, this action will generate a summary of the changes.","title":"step 2: create a workflow file"},{"location":"getting-started/#common-customizations","text":"","title":"common customizations"},{"location":"getting-started/#adding-comment-to-pr","text":"to automatically add the summary as a comment on your pr: - name: Post comment uses: actions/github-script@v7 with: github-token: ${{ secrets.GITHUB_TOKEN }} script: | const explanation = process.env.EXPLANATION; github.rest.issues.createComment({ issue_number: context.issue.number, owner: context.repo.owner, repo: context.repo.repo, body: `## \ud83e\udd16 AI Summary of Changes\\n\\n${explanation}` }); env: EXPLANATION: ${{ steps.explain.outputs.explanation }}","title":"adding comment to pr"},{"location":"getting-started/#custom-output-formatting","text":"you can customize how the explanation is generated: - name: Explain Diff id: explain uses: captradeoff/openai-summarize-diff-action@main with: diff: ${{ env.DIFF }} apikey: ${{ secrets.OPENAI_API_KEY }} examplePostSummary: \"feat: added new login system with improved security\" maxTokens: 50 maxCharacters: 200","title":"custom output formatting"},{"location":"getting-started/#tips-for-best-results","text":"keep diffs focused : the action works best with focused changes rather than massive refactorings use concise example summaries : the examplePostSummary parameter helps guide the style of output handle large repositories : for very large repositories, consider using shallow clones to speed up the action","title":"tips for best results"},{"location":"getting-started/#next-steps","text":"\ud83d\udcd8 usage examples - see more examples of the action in use \ud83d\udee0\ufe0f configuration options - learn all the configuration options \ud83e\udde9 api reference - detailed information about inputs and outputs \ud83d\udd0d troubleshooting - solutions for common issues","title":"next steps"},{"location":"license/","text":"MIT License Copyright (c) 2019 GitHub Actions Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"development/","text":"development guide \u2042 this guide provides information for developers who want to contribute to the openai summarize diff action or understand its inner workings. overview \u2042 the openai summarize diff action is a github action that uses openai's apis to generate human-readable explanations of code changes. this document covers local development setup, testing, and contribution guidelines. local development setup \u2042 to set up your development environment: clone the repository: bash git clone https://github.com/captradeoff/openai-summarize-diff-action.git cd openai-summarize-diff-action install dependencies: bash npm install set up your environment variables: bash cp .env.example .env # Edit .env file with your OpenAI API key project structure \u2042 the project is organized as follows: openai-summarize-diff-action/ \u251c\u2500\u2500 .github/ # GitHub workflows and configuration \u251c\u2500\u2500 dist/ # Compiled JavaScript (don't edit directly) \u251c\u2500\u2500 src/ # Source code \u2502 \u251c\u2500\u2500 index.js # Main entry point \u2502 \u251c\u2500\u2500 openai.js # OpenAI API integration \u2502 \u2514\u2500\u2500 utils.js # Utility functions \u251c\u2500\u2500 tests/ # Test files \u251c\u2500\u2500 docs/ # Documentation \u251c\u2500\u2500 action.yml # GitHub Action definition \u251c\u2500\u2500 package.json # Dependencies and scripts \u2514\u2500\u2500 README.md # Project overview development workflow \u2042 testing \u2042 run tests: npm test run tests with coverage: npm run test:coverage run tests in watch mode (useful during development): npm run test:watch linting \u2042 run linting: npm run lint building \u2042 build the action: npm run build this will run linting, tests, and then build the action into the dist directory. manual testing \u2042 you can test the action locally by creating a test script: // test-local.js require('dotenv').config(); const { generateDiffExplanation } = require('./src/openai'); async function test() { const diff = `diff --git a/file.js b/file.js index 123..456 789 --- a/file.js +++ b/file.js @@ -1,3 +1,4 @@ const a = 1; +const b = 2; const c = 3;`; try { const explanation = await generateDiffExplanation({ diff, apiKey: process.env.OPENAI_API_KEY, maxTokens: 50, maxCharacters: 200 }); console.log('Explanation:', explanation); } catch (error) { console.error('Error:', error.message); } } test(); run the test script: node test-local.js creating a release \u2042 to create a new release: update the version in package.json update the changelog.md file commit and push your changes create a new release on github with a new tag (e.g., v1.0.0) additional resources \u2042 architecture documentation - understand the codebase structure troubleshooting guide - solutions for common issues contributing guidelines - how to contribute effectively getting help \u2042 if you encounter issues during development, please: check the troubleshooting guide search for existing issues in the github repository create a new issue if your problem hasn't been reported yet","title":"overview"},{"location":"development/#development-guide","text":"this guide provides information for developers who want to contribute to the openai summarize diff action or understand its inner workings.","title":"development guide"},{"location":"development/#overview","text":"the openai summarize diff action is a github action that uses openai's apis to generate human-readable explanations of code changes. this document covers local development setup, testing, and contribution guidelines.","title":"overview"},{"location":"development/#local-development-setup","text":"to set up your development environment: clone the repository: bash git clone https://github.com/captradeoff/openai-summarize-diff-action.git cd openai-summarize-diff-action install dependencies: bash npm install set up your environment variables: bash cp .env.example .env # Edit .env file with your OpenAI API key","title":"local development setup"},{"location":"development/#project-structure","text":"the project is organized as follows: openai-summarize-diff-action/ \u251c\u2500\u2500 .github/ # GitHub workflows and configuration \u251c\u2500\u2500 dist/ # Compiled JavaScript (don't edit directly) \u251c\u2500\u2500 src/ # Source code \u2502 \u251c\u2500\u2500 index.js # Main entry point \u2502 \u251c\u2500\u2500 openai.js # OpenAI API integration \u2502 \u2514\u2500\u2500 utils.js # Utility functions \u251c\u2500\u2500 tests/ # Test files \u251c\u2500\u2500 docs/ # Documentation \u251c\u2500\u2500 action.yml # GitHub Action definition \u251c\u2500\u2500 package.json # Dependencies and scripts \u2514\u2500\u2500 README.md # Project overview","title":"project structure"},{"location":"development/#development-workflow","text":"","title":"development workflow"},{"location":"development/#testing","text":"run tests: npm test run tests with coverage: npm run test:coverage run tests in watch mode (useful during development): npm run test:watch","title":"testing"},{"location":"development/#linting","text":"run linting: npm run lint","title":"linting"},{"location":"development/#building","text":"build the action: npm run build this will run linting, tests, and then build the action into the dist directory.","title":"building"},{"location":"development/#manual-testing","text":"you can test the action locally by creating a test script: // test-local.js require('dotenv').config(); const { generateDiffExplanation } = require('./src/openai'); async function test() { const diff = `diff --git a/file.js b/file.js index 123..456 789 --- a/file.js +++ b/file.js @@ -1,3 +1,4 @@ const a = 1; +const b = 2; const c = 3;`; try { const explanation = await generateDiffExplanation({ diff, apiKey: process.env.OPENAI_API_KEY, maxTokens: 50, maxCharacters: 200 }); console.log('Explanation:', explanation); } catch (error) { console.error('Error:', error.message); } } test(); run the test script: node test-local.js","title":"manual testing"},{"location":"development/#creating-a-release","text":"to create a new release: update the version in package.json update the changelog.md file commit and push your changes create a new release on github with a new tag (e.g., v1.0.0)","title":"creating a release"},{"location":"development/#additional-resources","text":"architecture documentation - understand the codebase structure troubleshooting guide - solutions for common issues contributing guidelines - how to contribute effectively","title":"additional resources"},{"location":"development/#getting-help","text":"if you encounter issues during development, please: check the troubleshooting guide search for existing issues in the github repository create a new issue if your problem hasn't been reported yet","title":"getting help"},{"location":"development/architecture/","text":"architecture overview \u2042 this document provides an in-depth look at the architecture of the openai summarize diff action, designed for developers who want to understand or contribute to the codebase. overview \u2042 the openai summarize diff action is designed to: receive a git diff as input send the diff to openai's api for analysis return a human-readable explanation of the changes the architecture follows a modular design with clear separation of concerns. components \u2042 core components \u2042 action entry point ( src/index.js ): coordinates the overall workflow openai client ( src/openai.js ): manages interactions with the openai api diff processing ( src/diff.js ): handles parsing and preprocessing of git diffs error handling ( src/errors.js ): provides standardized error handling data flow \u2042 the github action is triggered and inputs are collected inputs are validated the openai client is initialized the diff is preprocessed (e.g., trimmed if too large) the diff is sent to openai with a carefully crafted prompt the explanation is received from openai the explanation is processed and returned as an output design decisions \u2042 prompt engineering \u2042 the action uses a specific prompting strategy to get high-quality explanations: const systemMessage = `You are an expert developer tasked with explaining code changes in a clear, concise manner. Analyze the following git diff and provide a human-readable explanation of what has changed and why it might have been changed.`; const userMessage = `Please explain this diff in ${maxCharacters} characters or less: \\`\\`\\` ${diff} \\`\\`\\` Example of a good explanation format: \"${examplePostSummary}\"`; error handling strategy \u2042 the action implements robust error handling with exponential backoff for api calls: async function callWithRetry(fn, maxRetries = 3, initialDelay = 1000) { let retries = 0; while (true) { try { return await fn(); } catch (error) { if (retries >= maxRetries || !isRetryableError(error)) { throw error; } const delay = initialDelay * Math.pow(2, retries); console.log(`Retry ${retries + 1}/${maxRetries} after ${delay}ms`); await new Promise(resolve => setTimeout(resolve, delay)); retries++; } } } testing strategy \u2042 the project follows a comprehensive testing strategy: unit tests : test individual functions in isolation integration tests : test interactions between components e2e tests : test the entire action workflow performance considerations \u2042 several optimizations are made to ensure efficient operation: diff preprocessing : large diffs are trimmed to avoid token limits output formatting : the output is designed to be concise but informative caching : frequently used operations are cached future architecture considerations \u2042 potential future enhancements to the architecture: support for different openai models more sophisticated diff preprocessing enhanced customization options for the output format dependency graph \u2042 action.yml \u2514\u2500\u2500 src/index.js \u251c\u2500\u2500 src/openai.js \u2502 \u2514\u2500\u2500 openai (external) \u251c\u2500\u2500 src/diff.js \u2514\u2500\u2500 src/errors.js configuration flow \u2042 the action's behavior can be configured through several inputs: diff : the git diff to be explained (required) apikey : the openai api key (required) examplePostSummary : example of a good summary (optional) maxTokens : maximum tokens for the openai response (optional) maxCharacters : maximum characters in the output (optional) code organization \u2042 the code follows a modular organization: src/ \u251c\u2500\u2500 index.js # Main entry point and workflow coordination \u251c\u2500\u2500 openai.js # OpenAI API client and interaction logic \u251c\u2500\u2500 diff.js # Diff parsing and preprocessing utilities \u2514\u2500\u2500 errors.js # Error types and handling utilities each module has a single responsibility, making the code easier to maintain and extend.","title":"architecture"},{"location":"development/architecture/#architecture-overview","text":"this document provides an in-depth look at the architecture of the openai summarize diff action, designed for developers who want to understand or contribute to the codebase.","title":"architecture overview"},{"location":"development/architecture/#overview","text":"the openai summarize diff action is designed to: receive a git diff as input send the diff to openai's api for analysis return a human-readable explanation of the changes the architecture follows a modular design with clear separation of concerns.","title":"overview"},{"location":"development/architecture/#components","text":"","title":"components"},{"location":"development/architecture/#core-components","text":"action entry point ( src/index.js ): coordinates the overall workflow openai client ( src/openai.js ): manages interactions with the openai api diff processing ( src/diff.js ): handles parsing and preprocessing of git diffs error handling ( src/errors.js ): provides standardized error handling","title":"core components"},{"location":"development/architecture/#data-flow","text":"the github action is triggered and inputs are collected inputs are validated the openai client is initialized the diff is preprocessed (e.g., trimmed if too large) the diff is sent to openai with a carefully crafted prompt the explanation is received from openai the explanation is processed and returned as an output","title":"data flow"},{"location":"development/architecture/#design-decisions","text":"","title":"design decisions"},{"location":"development/architecture/#prompt-engineering","text":"the action uses a specific prompting strategy to get high-quality explanations: const systemMessage = `You are an expert developer tasked with explaining code changes in a clear, concise manner. Analyze the following git diff and provide a human-readable explanation of what has changed and why it might have been changed.`; const userMessage = `Please explain this diff in ${maxCharacters} characters or less: \\`\\`\\` ${diff} \\`\\`\\` Example of a good explanation format: \"${examplePostSummary}\"`;","title":"prompt engineering"},{"location":"development/architecture/#error-handling-strategy","text":"the action implements robust error handling with exponential backoff for api calls: async function callWithRetry(fn, maxRetries = 3, initialDelay = 1000) { let retries = 0; while (true) { try { return await fn(); } catch (error) { if (retries >= maxRetries || !isRetryableError(error)) { throw error; } const delay = initialDelay * Math.pow(2, retries); console.log(`Retry ${retries + 1}/${maxRetries} after ${delay}ms`); await new Promise(resolve => setTimeout(resolve, delay)); retries++; } } }","title":"error handling strategy"},{"location":"development/architecture/#testing-strategy","text":"the project follows a comprehensive testing strategy: unit tests : test individual functions in isolation integration tests : test interactions between components e2e tests : test the entire action workflow","title":"testing strategy"},{"location":"development/architecture/#performance-considerations","text":"several optimizations are made to ensure efficient operation: diff preprocessing : large diffs are trimmed to avoid token limits output formatting : the output is designed to be concise but informative caching : frequently used operations are cached","title":"performance considerations"},{"location":"development/architecture/#future-architecture-considerations","text":"potential future enhancements to the architecture: support for different openai models more sophisticated diff preprocessing enhanced customization options for the output format","title":"future architecture considerations"},{"location":"development/architecture/#dependency-graph","text":"action.yml \u2514\u2500\u2500 src/index.js \u251c\u2500\u2500 src/openai.js \u2502 \u2514\u2500\u2500 openai (external) \u251c\u2500\u2500 src/diff.js \u2514\u2500\u2500 src/errors.js","title":"dependency graph"},{"location":"development/architecture/#configuration-flow","text":"the action's behavior can be configured through several inputs: diff : the git diff to be explained (required) apikey : the openai api key (required) examplePostSummary : example of a good summary (optional) maxTokens : maximum tokens for the openai response (optional) maxCharacters : maximum characters in the output (optional)","title":"configuration flow"},{"location":"development/architecture/#code-organization","text":"the code follows a modular organization: src/ \u251c\u2500\u2500 index.js # Main entry point and workflow coordination \u251c\u2500\u2500 openai.js # OpenAI API client and interaction logic \u251c\u2500\u2500 diff.js # Diff parsing and preprocessing utilities \u2514\u2500\u2500 errors.js # Error types and handling utilities each module has a single responsibility, making the code easier to maintain and extend.","title":"code organization"},{"location":"development/troubleshooting/","text":"Troubleshooting \u2042 This guide provides solutions for common issues you might encounter when using or developing with the OpenAI Summarize Diff Action. GitHub Action Issues \u2042 Action Fails with \"OpenAI API key is required\" \u2042 Problem : The action fails with the error message \"OpenAI API key is required.\" Possible causes : 1. The API key secret is not set in your repository 2. The secret name in your workflow doesn't match the secret name in your repository 3. The apikey input parameter is not properly referenced in your workflow file Solution : 1. Check that you've added the OpenAI API key as a secret in your repository: - Go to your repository \u2192 Settings \u2192 Secrets and variables \u2192 Actions - Verify that your OpenAI API key is added as a secret (e.g., OPENAI_API_KEY ) Ensure your workflow file correctly references the secret: ```yaml name: Explain Diff id: explain uses: captradeoff/openai-summarize-diff-action@main with: diff: ${{ env.DIFF }} apikey: ${{ secrets.OPENAI_API_KEY }} # Make sure this matches your secret name ``` Action Fails with \"Diff is required\" \u2042 Problem : The action fails with the error message \"Diff is required.\" Possible causes : 1. The diff generation in your workflow is failing 2. The diff is empty (no changes between the compared branches/commits) 3. The environment variable setting is incorrect Solution : 1. Debug your diff generation step by adding an output step: ```yaml - name: Get PR diff id: diff run: | git fetch origin ${{ github.event.pull_request.base.ref }} DIFF=$(git diff origin/${{ github.event.pull_request.base.ref }}..HEAD) echo \"DIFF< > $GITHUB_ENV echo \"$DIFF\" >> $GITHUB_ENV echo \"EOF\" >> $GITHUB_ENV name: Debug diff run: echo \"${{ env.DIFF }}\" ``` If the diff is empty, check that: There are actual changes between the branches Your Git fetch depth is sufficient ( fetch-depth: 0 is recommended) Action Fails with \"maxTokens must be a valid number\" \u2042 Problem : The action fails with the error message \"maxTokens must be a valid number.\" Possible causes : 1. The maxTokens parameter is provided but contains a non-numeric value 2. There's a syntax error in how the parameter is defined Solution : 1. Ensure the maxTokens parameter is a number: yaml maxTokens: 50 # Correct Not: yaml maxTokens: \"fifty\" # Incorrect If you're setting it dynamically, ensure it's properly converted to a number. OpenAI API Issues \u2042 Action Fails with \"Failed to generate explanation: 429 Too Many Requests\" \u2042 Problem : The action fails with a rate limit error from the OpenAI API. Possible causes : 1. You've exceeded your OpenAI API rate limits 2. Your account has billing issues Solution : 1. Implement retry logic in your workflow for transient rate limit issues 2. Check your OpenAI account for any billing or rate limit issues 3. Consider adding a delay between action runs if you're running many in parallel Action Returns Empty or Incomplete Explanation \u2042 Problem : The action runs successfully but returns an empty or truncated explanation. Possible causes : 1. The maxTokens parameter is set too low 2. The diff is very complex or large 3. The API response was cut off Solution : 1. Increase the maxTokens parameter: yaml maxTokens: 100 # Try a higher value Increase the maxCharacters parameter: yaml maxCharacters: 500 # Allow for longer explanations For large diffs, consider filtering to focus on meaningful changes. Development Environment Issues \u2042 Tests Failing with \"Cannot find module 'openai'\" \u2042 Problem : Tests fail with module not found errors. Possible causes : 1. Dependencies are not installed 2. The package has been updated and requires a reinstall Solution : 1. Reinstall dependencies: bash npm ci # Clean install from package-lock.json If the issue persists, try deleting node_modules and reinstalling: bash rm -rf node_modules npm install OpenAI Tests Failing Without API Key \u2042 Problem : OpenAI integration tests fail when no API key is available. Possible causes : 1. You're running tests that require a real OpenAI API key 2. Mocks are not properly set up Solution : 1. For local development, create a .env file with your API key: OPENAI_API_KEY=your_api_key_here For CI environments, use mocks instead of real API calls: javascript // Example of mocking the OpenAI API in tests jest.mock('openai', () => { return { OpenAI: jest.fn().mockImplementation(() => { return { chat: { completions: { create: jest.fn().mockResolvedValue({ choices: [{ message: { content: 'Mocked explanation' } }] }) } } }; }) }; }); Build and Deployment Issues \u2042 Action Build Fails \u2042 Problem : Build process fails with errors. Possible causes : 1. Linting errors 2. Test failures 3. Compilation errors Solution : 1. Run each step individually to isolate the issue: bash npm run lint npm test npm run build Fix any issues found in the specific step that fails. Action Works Locally but Fails in GitHub \u2042 Problem : The action works in your local testing but fails when deployed to GitHub. Possible causes : 1. Environment differences 2. Secret configuration issues 3. Permissions problems Solution : 1. Enable debug logs in GitHub Actions: - Go to your repository \u2192 Settings \u2192 Secrets and variables \u2192 Actions - Add a new repository secret named ACTIONS_STEP_DEBUG with the value true Check action runs with debug enabled to see detailed logs. Ensure all required permissions are specified in your workflow: yaml jobs: explain-diff: runs-on: ubuntu-latest permissions: pull-requests: write # If needed for commenting Common Errors and Solutions \u2042 Error Message Likely Cause Solution \"OpenAI API key is required\" Missing or incorrect API key Check API key configuration \"Diff is required\" Empty or missing diff Debug diff generation step \"maxTokens must be a valid number\" Invalid parameter value Ensure parameters are numeric \"429 Too Many Requests\" API rate limiting Check OpenAI usage and billing \"Failed to generate explanation\" Generic API error Check API key, request format, and logs Getting Additional Help \u2042 If you're encountering issues not covered in this guide: Check the GitHub Issues to see if others have reported similar problems Review the API Reference for correct parameter usage Consult the OpenAI API Documentation for API-specific issues Open a new issue with detailed information about the problem, including: Your workflow file (with secrets redacted) Error messages Environment details","title":"troubleshooting"},{"location":"development/troubleshooting/#troubleshooting","text":"This guide provides solutions for common issues you might encounter when using or developing with the OpenAI Summarize Diff Action.","title":"Troubleshooting"},{"location":"development/troubleshooting/#github-action-issues","text":"","title":"GitHub Action Issues"},{"location":"development/troubleshooting/#action-fails-with-openai-api-key-is-required","text":"Problem : The action fails with the error message \"OpenAI API key is required.\" Possible causes : 1. The API key secret is not set in your repository 2. The secret name in your workflow doesn't match the secret name in your repository 3. The apikey input parameter is not properly referenced in your workflow file Solution : 1. Check that you've added the OpenAI API key as a secret in your repository: - Go to your repository \u2192 Settings \u2192 Secrets and variables \u2192 Actions - Verify that your OpenAI API key is added as a secret (e.g., OPENAI_API_KEY ) Ensure your workflow file correctly references the secret: ```yaml name: Explain Diff id: explain uses: captradeoff/openai-summarize-diff-action@main with: diff: ${{ env.DIFF }} apikey: ${{ secrets.OPENAI_API_KEY }} # Make sure this matches your secret name ```","title":"Action Fails with \"OpenAI API key is required\""},{"location":"development/troubleshooting/#action-fails-with-diff-is-required","text":"Problem : The action fails with the error message \"Diff is required.\" Possible causes : 1. The diff generation in your workflow is failing 2. The diff is empty (no changes between the compared branches/commits) 3. The environment variable setting is incorrect Solution : 1. Debug your diff generation step by adding an output step: ```yaml - name: Get PR diff id: diff run: | git fetch origin ${{ github.event.pull_request.base.ref }} DIFF=$(git diff origin/${{ github.event.pull_request.base.ref }}..HEAD) echo \"DIFF< > $GITHUB_ENV echo \"$DIFF\" >> $GITHUB_ENV echo \"EOF\" >> $GITHUB_ENV name: Debug diff run: echo \"${{ env.DIFF }}\" ``` If the diff is empty, check that: There are actual changes between the branches Your Git fetch depth is sufficient ( fetch-depth: 0 is recommended)","title":"Action Fails with \"Diff is required\""},{"location":"development/troubleshooting/#action-fails-with-maxtokens-must-be-a-valid-number","text":"Problem : The action fails with the error message \"maxTokens must be a valid number.\" Possible causes : 1. The maxTokens parameter is provided but contains a non-numeric value 2. There's a syntax error in how the parameter is defined Solution : 1. Ensure the maxTokens parameter is a number: yaml maxTokens: 50 # Correct Not: yaml maxTokens: \"fifty\" # Incorrect If you're setting it dynamically, ensure it's properly converted to a number.","title":"Action Fails with \"maxTokens must be a valid number\""},{"location":"development/troubleshooting/#openai-api-issues","text":"","title":"OpenAI API Issues"},{"location":"development/troubleshooting/#action-fails-with-failed-to-generate-explanation-429-too-many-requests","text":"Problem : The action fails with a rate limit error from the OpenAI API. Possible causes : 1. You've exceeded your OpenAI API rate limits 2. Your account has billing issues Solution : 1. Implement retry logic in your workflow for transient rate limit issues 2. Check your OpenAI account for any billing or rate limit issues 3. Consider adding a delay between action runs if you're running many in parallel","title":"Action Fails with \"Failed to generate explanation: 429 Too Many Requests\""},{"location":"development/troubleshooting/#action-returns-empty-or-incomplete-explanation","text":"Problem : The action runs successfully but returns an empty or truncated explanation. Possible causes : 1. The maxTokens parameter is set too low 2. The diff is very complex or large 3. The API response was cut off Solution : 1. Increase the maxTokens parameter: yaml maxTokens: 100 # Try a higher value Increase the maxCharacters parameter: yaml maxCharacters: 500 # Allow for longer explanations For large diffs, consider filtering to focus on meaningful changes.","title":"Action Returns Empty or Incomplete Explanation"},{"location":"development/troubleshooting/#development-environment-issues","text":"","title":"Development Environment Issues"},{"location":"development/troubleshooting/#tests-failing-with-cannot-find-module-openai","text":"Problem : Tests fail with module not found errors. Possible causes : 1. Dependencies are not installed 2. The package has been updated and requires a reinstall Solution : 1. Reinstall dependencies: bash npm ci # Clean install from package-lock.json If the issue persists, try deleting node_modules and reinstalling: bash rm -rf node_modules npm install","title":"Tests Failing with \"Cannot find module 'openai'\""},{"location":"development/troubleshooting/#openai-tests-failing-without-api-key","text":"Problem : OpenAI integration tests fail when no API key is available. Possible causes : 1. You're running tests that require a real OpenAI API key 2. Mocks are not properly set up Solution : 1. For local development, create a .env file with your API key: OPENAI_API_KEY=your_api_key_here For CI environments, use mocks instead of real API calls: javascript // Example of mocking the OpenAI API in tests jest.mock('openai', () => { return { OpenAI: jest.fn().mockImplementation(() => { return { chat: { completions: { create: jest.fn().mockResolvedValue({ choices: [{ message: { content: 'Mocked explanation' } }] }) } } }; }) }; });","title":"OpenAI Tests Failing Without API Key"},{"location":"development/troubleshooting/#build-and-deployment-issues","text":"","title":"Build and Deployment Issues"},{"location":"development/troubleshooting/#action-build-fails","text":"Problem : Build process fails with errors. Possible causes : 1. Linting errors 2. Test failures 3. Compilation errors Solution : 1. Run each step individually to isolate the issue: bash npm run lint npm test npm run build Fix any issues found in the specific step that fails.","title":"Action Build Fails"},{"location":"development/troubleshooting/#action-works-locally-but-fails-in-github","text":"Problem : The action works in your local testing but fails when deployed to GitHub. Possible causes : 1. Environment differences 2. Secret configuration issues 3. Permissions problems Solution : 1. Enable debug logs in GitHub Actions: - Go to your repository \u2192 Settings \u2192 Secrets and variables \u2192 Actions - Add a new repository secret named ACTIONS_STEP_DEBUG with the value true Check action runs with debug enabled to see detailed logs. Ensure all required permissions are specified in your workflow: yaml jobs: explain-diff: runs-on: ubuntu-latest permissions: pull-requests: write # If needed for commenting","title":"Action Works Locally but Fails in GitHub"},{"location":"development/troubleshooting/#common-errors-and-solutions","text":"Error Message Likely Cause Solution \"OpenAI API key is required\" Missing or incorrect API key Check API key configuration \"Diff is required\" Empty or missing diff Debug diff generation step \"maxTokens must be a valid number\" Invalid parameter value Ensure parameters are numeric \"429 Too Many Requests\" API rate limiting Check OpenAI usage and billing \"Failed to generate explanation\" Generic API error Check API key, request format, and logs","title":"Common Errors and Solutions"},{"location":"development/troubleshooting/#getting-additional-help","text":"If you're encountering issues not covered in this guide: Check the GitHub Issues to see if others have reported similar problems Review the API Reference for correct parameter usage Consult the OpenAI API Documentation for API-specific issues Open a new issue with detailed information about the problem, including: Your workflow file (with secrets redacted) Error messages Environment details","title":"Getting Additional Help"}]}